---
import { Image } from 'astro:assets';

import type { ImageMetadata } from 'astro';

type ImageItem = {
  id: string;
  src: ImageMetadata;
  alt: string;
  width: number;
  height: number;
  colSpan?: number;
  rowSpan?: number;
};

const { images } = Astro.props as { images: ImageItem[] };
---

<div
  class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"
  style="grid-template-rows: repeat(auto-fill, minmax(200px, auto));"
>
  {images.map((img, index) => (
    <div
      class="overflow-hidden rounded-lg bg-image-background border border-border min-h-[200px] sm:min-h-[380px] grid-item"
      style={`--col-span: ${img.colSpan || 1}; --row-span: ${img.rowSpan || 1};`}
    >
      <Image
        src={img.src}
        alt={img.alt}
        width={img.width}
        height={img.height}
        loading={index < 3 ? "eager" : "lazy"}
        class="w-full h-full object-cover"
        quality={92}
      />
    </div>

<style>
  /* Mobile: all items span 1 column */
  .grid-item {
    grid-column: span 1;
    grid-row: span var(--row-span);
  }
  
  /* Tablet: 2 column grid */
  @media (min-width: 640px) {
    .grid-item {
      grid-column: span min(var(--col-span), 2);
      grid-row: span var(--row-span);
    }
  }
  
  /* Desktop: 3 column grid */
  @media (min-width: 1024px) {
    .grid-item {
      grid-column: span var(--col-span);
      grid-row: span var(--row-span);
    }
  }
</style>
  ))}
</div>
</div>